import React from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  Alert,
  Share
} from 'react-native';
import { COLORS, SPACING } from '../../config/constants';
import { RouteProp } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { CulvertToolParamList } from '../../navigation/CulvertToolNavigator';

type ResultScreenRouteProp = RouteProp<CulvertToolParamList, 'Result'>;
type ResultScreenNavigationProp = StackNavigationProp<CulvertToolParamList, 'Result'>;

type Props = {
  route: ResultScreenRouteProp;
  navigation: ResultScreenNavigationProp;
};

const ResultScreen: React.FC<Props> = ({ route, navigation }) => {
  const { culvertResults } = route.params;
  
  const handleSaveReport = async () => {
    try {
      // Build a formatted report message
      const reportMessage = `
CULVERT SIZING RECOMMENDATION

Recommended Size: ${culvertResults.recommendedSize} mm
Method Used: ${culvertResults.method}
Design Flow (Q100): ${culvertResults.q100Flow} m³/s
Safety Factor Applied: ${culvertResults.safetyFactor}
Controlling Factor: ${culvertResults.controllingFactor === 'inlet' ? 'Inlet Control' : 'Outlet Control'}

${culvertResults.comparisonInfo ? `Comparison Information: ${culvertResults.comparisonInfo}` : ''}
${culvertResults.transportabilitySize ? `Stream Transportability Size: ${culvertResults.transportabilitySize} mm` : ''}

Notes & Recommendations:
This culvert size is recommended based on the hydraulic analysis of the provided watershed characteristics. A debris rack is recommended to prevent blockage. Regular maintenance inspections should be scheduled especially after major storm events.

Generated by AI Forester Field Companion App
      `;
      
      const result = await Share.share({
        message: reportMessage,
        title: 'Culvert Sizing Report'
      });
      
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          console.log(`Shared with activity type: ${result.activityType}`);
        } else {
          console.log('Shared successfully');
        }
      } else if (result.action === Share.dismissedAction) {
        console.log('Share dismissed');
      }
    } catch (error) {
      Alert.alert('Error', 'Could not share the report. Please try again.');
      console.error('Share error:', error);
    }
  };
  
  const handleEditInputs = () => {
    navigation.goBack();
  };
  
  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        {/* Header */}
        <View style={styles.header}>
          <Text style={styles.headerTitle}>Culvert Sizing Results</Text>
        </View>
        
        <ScrollView style={styles.scrollView}>
          <View style={styles.content}>
            <Text style={styles.title}>Recommended Culvert Size</Text>
            
            <View style={styles.resultCard}>
              <View style={styles.resultItem}>
                <Text style={styles.resultLabel}>Recommended Diameter:</Text>
                <Text style={styles.resultValue}>{culvertResults.recommendedSize} mm</Text>
              </View>
              
              <View style={styles.resultItem}>
                <Text style={styles.resultLabel}>Method Used:</Text>
                <Text style={styles.resultValue}>{culvertResults.method}</Text>
              </View>
              
              {culvertResults.q100Flow && (
                <View style={styles.resultItem}>
                  <Text style={styles.resultLabel}>Flow Capacity (Q100):</Text>
                  <Text style={styles.resultValue}>{culvertResults.q100Flow} m³/s</Text>
                </View>
              )}
              
              <View style={styles.resultItem}>
                <Text style={styles.resultLabel}>Safety Factor:</Text>
                <Text style={styles.resultValue}>{culvertResults.safetyFactor}</Text>
              </View>
              
              <View style={styles.resultItem}>
                <Text style={styles.resultLabel}>Controlling Factor:</Text>
                <Text style={styles.resultValue}>
                  {culvertResults.controllingFactor === 'inlet' ? 'Inlet Control' : 'Outlet Control'}
                </Text>
              </View>
              
              {culvertResults.transportabilitySize && (
                <View style={styles.resultItem}>
                  <Text style={styles.resultLabel}>Transportability Size:</Text>
                  <Text style={styles.resultValue}>{culvertResults.transportabilitySize} mm</Text>
                </View>
              )}
              
              {culvertResults.comparisonInfo && (
                <View style={styles.resultItem}>
                  <Text style={styles.resultLabel}>Size Comparison:</Text>
                  <Text style={styles.resultValue}>{culvertResults.comparisonInfo}</Text>
                </View>
              )}
              
              <View style={styles.divider} />
              
              <Text style={styles.notesTitle}>Notes & Recommendations</Text>
              <Text style={styles.notesText}>
                This culvert size is recommended based on the hydraulic analysis 
                of the provided watershed characteristics. A debris rack is recommended 
                to prevent blockage. Regular maintenance inspections should be scheduled
                especially after major storm events.
                
                {culvertResults.controllingFactor === 'inlet' 
                  ? '\n\nThis culvert is controlled by inlet conditions. Consider improving the inlet geometry to optimize performance.' 
                  : '\n\nThis culvert is controlled by outlet conditions. Ensure proper energy dissipation at the outlet.'}
                
                {culvertResults.recommendedSize >= 900 
                  ? '\n\nDue to the large culvert size, consider using alternative structures such as a bridge or open-bottom arch if site conditions allow.' 
                  : ''}
              </Text>
            </View>
            
            <View style={styles.buttonRow}>
              <TouchableOpacity 
                style={[styles.button, styles.secondaryButton]}
                onPress={handleEditInputs}
              >
                <Text style={styles.secondaryButtonText}>Edit Inputs</Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={styles.button}
                onPress={handleSaveReport}
              >
                <Text style={styles.buttonText}>Save Report</Text>
              </TouchableOpacity>
            </View>
          </View>
        </ScrollView>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: COLORS.primary,
  },
  container: {
    flex: 1,
    backgroundColor: COLORS.gray[100],
  },
  header: {
    backgroundColor: COLORS.primary,
    padding: SPACING.md,
    alignItems: 'center',
  },
  headerTitle: {
    color: COLORS.white,
    fontSize: 18,
    fontWeight: 'bold',
  },
  scrollView: {
    flex: 1,
  },
  content: {
    padding: SPACING.md,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
    color: COLORS.gray[800],
    marginBottom: SPACING.md,
  },
  resultCard: {
    backgroundColor: COLORS.white,
    borderRadius: 8,
    padding: SPACING.md,
    marginBottom: SPACING.md,
    shadowColor: COLORS.black,
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  resultItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: SPACING.sm,
  },
  resultLabel: {
    fontSize: 14,
    color: COLORS.gray[600],
  },
  resultValue: {
    fontSize: 14,
    fontWeight: '600',
    color: COLORS.gray[800],
  },
  divider: {
    height: 1,
    backgroundColor: COLORS.gray[200],
    marginVertical: SPACING.md,
  },
  notesTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.gray[800],
    marginBottom: SPACING.sm,
  },
  notesText: {
    fontSize: 14,
    color: COLORS.gray[600],
    lineHeight: 20,
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: SPACING.md,
  },
  button: {
    flex: 1,
    backgroundColor: COLORS.primary,
    paddingVertical: SPACING.sm,
    paddingHorizontal: SPACING.md,
    borderRadius: 4,
    alignItems: 'center',
    marginHorizontal: SPACING.xs,
  },
  buttonText: {
    color: COLORS.white,
    fontWeight: '600',
    fontSize: 16,
  },
  secondaryButton: {
    backgroundColor: COLORS.white,
    borderWidth: 1,
    borderColor: COLORS.primary,
  },
  secondaryButtonText: {
    color: COLORS.primary,
    fontWeight: '600',
    fontSize: 16,
  },
});

export default ResultScreen;