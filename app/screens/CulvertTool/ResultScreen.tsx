import React from 'react';
import { 
  View, 
  Text, 
  StyleSheet, 
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  Alert,
  Share,
  ActivityIndicator
} from 'react-native';
import { COLORS, SPACING } from '../../config/constants';
import { RouteProp } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { CulvertToolParamList } from '../../navigation/CulvertToolNavigator';

type ResultScreenRouteProp = RouteProp<CulvertToolParamList, 'Result'>;
type ResultScreenNavigationProp = StackNavigationProp<CulvertToolParamList, 'Result'>;

type Props = {
  route: ResultScreenRouteProp;
  navigation: ResultScreenNavigationProp;
};

const ResultScreen: React.FC<Props> = ({ route, navigation }) => {
  const { culvertResults } = route.params;
  const [isSharing, setIsSharing] = React.useState(false);
  
  const handleSaveReport = async () => {
    try {
      setIsSharing(true);
      
      // Build a formatted report message
      const reportMessage = `
CULVERT SIZING RECOMMENDATION

Recommended Size: ${culvertResults.recommendedSize} mm
Method Used: ${culvertResults.method}
Design Flow (Q100): ${culvertResults.q100Flow} m³/s
Safety Factor Applied: ${culvertResults.safetyFactor}
Controlling Factor: ${culvertResults.controllingFactor === 'inlet' ? 'Inlet Control' : 'Outlet Control'}

${culvertResults.comparisonInfo ? `Comparison Information: ${culvertResults.comparisonInfo}` : ''}
${culvertResults.transportabilitySize ? `Stream Transportability Size: ${culvertResults.transportabilitySize} mm` : ''}

Notes & Recommendations:
This culvert size is recommended based on the hydraulic analysis of the provided watershed characteristics. A debris rack is recommended to prevent blockage. Regular maintenance inspections should be scheduled especially after major storm events.

Generated by AI Forester Field Companion App
      `;
      
      const result = await Share.share({
        message: reportMessage,
        title: 'Culvert Sizing Report'
      });
      
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          console.log(`Shared with activity type: ${result.activityType}`);
        } else {
          console.log('Shared successfully');
        }
      } else if (result.action === Share.dismissedAction) {
        console.log('Share dismissed');
      }
    } catch (error) {
      Alert.alert('Error', 'Could not share the report. Please try again.');
      console.error('Share error:', error);
    } finally {
      setIsSharing(false);
    }
  };
  
  const handleEditInputs = () => {
    navigation.goBack();
  };

  // Derive a recommendation note based on culvert size
  const getRecommendationNote = () => {
    if (culvertResults.recommendedSize >= 1200) {
      return "Large culvert size detected. Consider a bridge or open-bottom arch culvert for better environmental performance.";
    } else if (culvertResults.recommendedSize >= 900) {
      return "Consider installing a debris rack to prevent blockage during high flow events.";
    } else {
      return "Regular maintenance and inspection recommended, especially after major storm events.";
    }
  };
  
  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        {/* Header */}
        <View style={styles.header}>
          <Text style={styles.headerTitle}>Culvert Sizing Results</Text>
        </View>
        
        <ScrollView style={styles.scrollView}>
          <View style={styles.content}>
            {/* Main Result Card */}
            <View style={styles.mainResultCard}>
              <Text style={styles.title}>Recommended Culvert Size</Text>
              
              <View style={styles.sizeDisplay}>
                <Text style={styles.sizeValue}>{culvertResults.recommendedSize} mm</Text>
                <Text style={styles.sizeMethod}>Based on {culvertResults.method}</Text>
              </View>
              
              {/* Culvert Visualization */}
              <View style={styles.visualizationContainer}>
                <View style={styles.roadLine} />
                <View 
                  style={[
                    styles.culvertCircle, 
                    { 
                      width: Math.min(100, culvertResults.recommendedSize / 10),
                      height: Math.min(100, culvertResults.recommendedSize / 10) 
                    }
                  ]} 
                />
                <View style={styles.roadLine} />
                <Text style={styles.visualNote}>Visual representation (not to scale)</Text>
              </View>
              
              {/* Recommendation Note */}
              <View style={styles.recommendationBox}>
                <Text style={styles.recommendationText}>
                  {getRecommendationNote()}
                </Text>
              </View>
            </View>
            
            {/* Details Card */}
            <View style={styles.detailsCard}>
              <Text style={styles.cardTitle}>Calculation Details</Text>
              
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Flow Capacity (Q100):</Text>
                <Text style={styles.detailValue}>{culvertResults.q100Flow} m³/s</Text>
              </View>
              
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Safety Factor:</Text>
                <Text style={styles.detailValue}>{culvertResults.safetyFactor}</Text>
              </View>
              
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Controlling Factor:</Text>
                <Text style={styles.detailValue}>
                  {culvertResults.controllingFactor === 'inlet' ? 'Inlet Control' : 'Outlet Control'}
                </Text>
              </View>
              
              {culvertResults.transportabilitySize && (
                <View style={styles.detailRow}>
                  <Text style={styles.detailLabel}>Transportability Size:</Text>
                  <Text style={styles.detailValue}>{culvertResults.transportabilitySize} mm</Text>
                </View>
              )}
              
              {culvertResults.comparisonInfo && (
                <View style={styles.comparisonBox}>
                  <Text style={styles.comparisonText}>
                    {culvertResults.comparisonInfo}
                  </Text>
                </View>
              )}
            </View>
            
            {/* Technical Notes */}
            <View style={styles.notesCard}>
              <Text style={styles.cardTitle}>Technical Notes</Text>
              <Text style={styles.notesText}>
                {culvertResults.controllingFactor === 'inlet' 
                  ? 'This culvert is controlled by inlet conditions. Consider improving the inlet geometry to optimize performance.' 
                  : 'This culvert is controlled by outlet conditions. Ensure proper energy dissipation at the outlet to prevent erosion.'}
              </Text>
              
              <Text style={styles.notesText}>
                Minimum embedment depth should be {Math.ceil(culvertResults.recommendedSize * 0.2 / 50) * 50} mm 
                to maintain stream substrate through the culvert structure.
              </Text>
              
              {culvertResults.recommendedSize >= 900 && (
                <Text style={styles.notesText}>
                  For a culvert of this size, fish passage should be considered. Ensure water velocity 
                  during normal flows doesn't exceed 0.9 m/s for adult fish or 0.3 m/s for juveniles.
                </Text>
              )}
            </View>
          </View>
        </ScrollView>
        
        {/* Action Buttons */}
        <View style={styles.footer}>
          <TouchableOpacity 
            style={styles.secondaryButton} 
            onPress={handleEditInputs}
          >
            <Text style={styles.secondaryButtonText}>Edit Inputs</Text>
          </TouchableOpacity>
          
          <TouchableOpacity 
            style={styles.primaryButton}
            onPress={handleSaveReport}
            disabled={isSharing}
          >
            {isSharing ? (
              <ActivityIndicator color={COLORS.white} size="small" />
            ) : (
              <Text style={styles.primaryButtonText}>Share Report</Text>
            )}
          </TouchableOpacity>
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: COLORS.primary,
  },
  container: {
    flex: 1,
    backgroundColor: COLORS.gray[100],
  },
  header: {
    backgroundColor: COLORS.primary,
    padding: SPACING.md,
    alignItems: 'center',
  },
  headerTitle: {
    color: COLORS.white,
    fontSize: 18,
    fontWeight: 'bold',
  },
  scrollView: {
    flex: 1,
  },
  content: {
    padding: SPACING.md,
  },
  mainResultCard: {
    backgroundColor: COLORS.white,
    borderRadius: 12,
    padding: SPACING.lg,
    marginBottom: SPACING.md,
    shadowColor: COLORS.black,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 4,
    alignItems: 'center',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.gray[800],
    marginBottom: SPACING.md,
    textAlign: 'center',
  },
  sizeDisplay: {
    alignItems: 'center',
    marginBottom: SPACING.md,
  },
  sizeValue: {
    fontSize: 36,
    fontWeight: 'bold',
    color: COLORS.primary,
    marginBottom: SPACING.xs,
  },
  sizeMethod: {
    fontSize: 14,
    color: COLORS.gray[600],
  },
  visualizationContainer: {
    alignItems: 'center',
    marginVertical: SPACING.md,
    width: '100%',
  },
  roadLine: {
    height: 8,
    backgroundColor: COLORS.gray[400],
    width: '80%',
    borderRadius: 4,
  },
  culvertCircle: {
    backgroundColor: COLORS.blue[100],
    borderWidth: 2,
    borderColor: COLORS.blue[400],
    borderRadius: 50,
    marginVertical: SPACING.xs,
  },
  visualNote: {
    fontSize: 12,
    color: COLORS.gray[500],
    marginTop: SPACING.sm,
  },
  recommendationBox: {
    backgroundColor: COLORS.green[50],
    borderWidth: 1,
    borderColor: COLORS.green[200],
    borderRadius: 8,
    padding: SPACING.md,
    marginTop: SPACING.md,
    width: '100%',
  },
  recommendationText: {
    fontSize: 14,
    color: COLORS.green[800],
    lineHeight: 20,
  },
  detailsCard: {
    backgroundColor: COLORS.white,
    borderRadius: 12,
    padding: SPACING.md,
    marginBottom: SPACING.md,
    shadowColor: COLORS.black,
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  cardTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: COLORS.gray[800],
    marginBottom: SPACING.sm,
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: SPACING.sm,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.gray[200],
  },
  detailLabel: {
    fontSize: 14,
    color: COLORS.gray[600],
  },
  detailValue: {
    fontSize: 14,
    fontWeight: '600',
    color: COLORS.gray[800],
  },
  comparisonBox: {
    backgroundColor: COLORS.blue[50],
    borderRadius: 6,
    padding: SPACING.sm,
    marginTop: SPACING.sm,
  },
  comparisonText: {
    fontSize: 13,
    color: COLORS.blue[700],
  },
  notesCard: {
    backgroundColor: COLORS.white,
    borderRadius: 12,
    padding: SPACING.md,
    marginBottom: SPACING.md,
    shadowColor: COLORS.black,
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  notesText: {
    fontSize: 14,
    color: COLORS.gray[700],
    lineHeight: 20,
    marginBottom: SPACING.sm,
  },
  footer: {
    padding: SPACING.md,
    backgroundColor: COLORS.white,
    borderTopWidth: 1,
    borderTopColor: COLORS.gray[200],
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  primaryButton: {
    flex: 1,
    backgroundColor: COLORS.primary,
    borderRadius: 8,
    padding: SPACING.md,
    alignItems: 'center',
    marginLeft: SPACING.xs,
  },
  primaryButtonText: {
    color: COLORS.white,
    fontWeight: '600',
    fontSize: 16,
  },
  secondaryButton: {
    flex: 1,
    backgroundColor: COLORS.white,
    borderWidth: 1,
    borderColor: COLORS.gray[300],
    borderRadius: 8,
    padding: SPACING.md,
    alignItems: 'center',
    marginRight: SPACING.xs,
  },
  secondaryButtonText: {
    color: COLORS.gray[700],
    fontWeight: '600',
    fontSize: 16,
  },
});

export default ResultScreen;